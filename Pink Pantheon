package com.stuypulse.robot;

import com.ctre.phoenix.motorcontrol.VictorSPXControlMode;
import com.ctre.phoenix.motorcontrol.can.VictorSPX;

// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.Spark;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the functions corresponding to
 * each mode, as described in the TimedRobot documentation. If you change the name of this class or
 * the package after creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  private static final String DoNothingAuto = "Do Nothing Auto";
  private static final String moveForwardAuto = "Move Forward Auto";
  private String m_autoSelected;
  private final SendableChooser<String> m_chooser = new SendableChooser<>();



  private DifferentialDrive drive;
  private VictorSPX feederMotor;
  private VictorSPX shooterMotor;
  private Joystick driverJoystick;
  private Joystick operatorJoystick;
  
  public Timer timer = new Timer();

  public static double scalar = 1.3;
  // boolean DelayTime = SmartDashboard.putNumber("DelayTime", 3);
  // boolean moveForwardTime = SmartDashboard.putNumber("Move Forward Time", 3.0);
  public Robot(){
    // createSmartDashboardNumber("Delay Time", 3);
    // createSmartDashboardNumber("Move Forward Time", 3);
    SmartDashboard.putNumber("Delay Time", 3);
    SmartDashboard.putNumber("Move Forward Time", 4);
  } 



  // private static final double AutonDelay = 1; 
  /**
   * This function is run when the robot is first started up and should be used for any
   * initialization code.
   */
  @Override
  public void robotInit() {

    m_chooser.setDefaultOption("Do Nothing Auton", DoNothingAuto);
    m_chooser.addOption("Move Forward Auton", moveForwardAuto);
    SmartDashboard.putData("Auto choices", m_chooser);
    

    //check if motors are inverted
    MotorControllerGroup leftMotors = new MotorControllerGroup(new Spark(1), new Spark(4));
    MotorControllerGroup rightMotors = new MotorControllerGroup(new Spark(2), new Spark(3));

    VictorSPX feederMotor = new VictorSPX(0); // find actual values for these later 
    VictorSPX shooterMotor = new VictorSPX(1);

    drive = new DifferentialDrive(leftMotors, rightMotors);

    driverJoystick = new Joystick(0); // to check
    operatorJoystick = new Joystick(1); // to check 
}


  /**
   * This function is called every 20 ms, no matter the mode. Use this for items like diagnostics
   * that you want ran during disabled, autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before LiveWindow and
   * SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {}

  /**
   * This autonomous (along with the chooser code above) shows how to select between different
   * autonomous modes using the dashboard. The sendable chooser code works with the Java
   * SmartDashboard. If you prefer the LabVIEW Dashboard, remove all of the chooser code and
   * uncomment the getString line to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to the switch structure
   * below with additional strings. If using the SendableChooser make sure to add them to the
   * chooser code above as well.
   */


  @Override
  public void autonomousInit() {
    timer.reset();
    timer.start();
    m_autoSelected = m_chooser.getSelected();
    
    // m_autoSelected = SmartDashboard.getString("Auto Selector", kDefaultAuto);
    System.out.println("Auto selected: " + m_autoSelected);
    switch (m_autoSelected) {
      case moveForwardAuto:
        // Put custom auto code here
    
        

        break;
      case DoNothingAuto:
      default:
        // Put default auto code here
        break;
    }
  }

  /** This function is called periodically during autonomous. */
  @Override
  public void autonomousPeriodic() {
    
    
    switch (m_autoSelected) {
      case moveForwardAuto:
      System.out.println(SmartDashboard.getNumber("Delay Time", 3));
      if (!timer.hasElapsed(SmartDashboard.getNumber("Delay Time", 3))) {
        drive.stopMotor();
      }
      
      if (timer.hasElapsed(SmartDashboard.getNumber("Move Forward Time", 4))) {

        drive.tankDrive(0.5, -.5);
      }
      
        break;
      case DoNothingAuto:
      default:
        // Put default auto code here
        break;
    }
  }
 /** This function is called once when teleop is enabled. */
  @Override
  public void teleopInit() {}

  /** This function is called periodically during operator control. */
  @Override
  public void teleopPeriodic() {
    drive.tankDrive(-driverJoystick.getRawAxis(1), driverJoystick.getRawAxis(5));
    if (operatorJoystick.getRawButton(0)) {  //find the button number that corresponds to left trigger
        shooterMotor.set(VictorSPXControlMode.PercentOutput, 1);
    }
    if (operatorJoystick.getRawButton(1)) {  //find the button number that corresponds to left bumper 
        shooterMotor.set(VictorSPXControlMode.PercentOutput, 0);
    }
    if (operatorJoystick.getRawButton(2)) {  //find the button number that corresponds to right trigger
        feederMotor.set(VictorSPXControlMode.PercentOutput, .3);
    }
    if (operatorJoystick.getRawButton(3)) {  //find the button number that corresponds to right bumper
        feederMotor.set(VictorSPXControlMode.PercentOutput, 0);
    }
  }

  /** This function is called once when the robot is disabled. */
  @Override
  public void disabledInit() {}

  /** This function is called periodically when disabled. */
  @Override
  public void disabledPeriodic() {}

  /** This function is called once when test mode is enabled. */
  @Override
  public void testInit() {}

  /** This function is called periodically during test mode. */
  @Override
  public void testPeriodic() {}

  /** This function is called once when the robot is first started up. */
  @Override
  public void simulationInit() {}

  /** This function is called periodically whilst in simulation. */
  @Override
  public void simulationPeriodic() {}

  public static double createSmartDashboardNumber(String key, double DefValue){
    double value = SmartDashboard.getNumber(key, DefValue);
    SmartDashboard.putNumber(key, value);
    return value;
  }

  
}

